!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Rust	C,constant	/A constant/
!_TAG_KIND_DESCRIPTION!Rust	M,macro	/Macro Definition/
!_TAG_KIND_DESCRIPTION!Rust	P,method	/A method/
!_TAG_KIND_DESCRIPTION!Rust	c,implementation	/implementation/
!_TAG_KIND_DESCRIPTION!Rust	e,enumerator	/An enum variant/
!_TAG_KIND_DESCRIPTION!Rust	f,function	/Function/
!_TAG_KIND_DESCRIPTION!Rust	g,enum	/Enum/
!_TAG_KIND_DESCRIPTION!Rust	i,interface	/trait interface/
!_TAG_KIND_DESCRIPTION!Rust	m,field	/A struct field/
!_TAG_KIND_DESCRIPTION!Rust	n,module	/module/
!_TAG_KIND_DESCRIPTION!Rust	s,struct	/structural type/
!_TAG_KIND_DESCRIPTION!Rust	t,typedef	/Type Alias/
!_TAG_KIND_DESCRIPTION!Rust	v,variable	/Global variable/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Rust	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/sabinonweb/Documents/Projects/StudyBuddy/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
CommunityPostSchema	backend/server/src/models/community_post_schema.rs	/^pub struct CommunityPostSchema {$/;"	s
CommunityPostsSchema	backend/server/src/models/community_post_schema.rs	/^pub struct CommunityPostsSchema {$/;"	s
DB_NAME	backend/server/src/community_post.rs	/^const DB_NAME: &str = "StuddyBuddy";$/;"	C
Grade	backend/server/src/community_post.rs	/^impl Grade {$/;"	c
Grade	backend/server/src/community_post.rs	/^struct Grade {$/;"	s
POSTS_COLLECTIONS_NAME	backend/server/src/community_post.rs	/^const POSTS_COLLECTIONS_NAME: &str = "Posts";$/;"	C
POST_COLLECTIONS_NAME	backend/server/src/community_post.rs	/^const POST_COLLECTIONS_NAME: &str = "CommunityPost";$/;"	C
Session	backend/chat_server/src/store.rs	/^pub struct Session {$/;"	s
USER_COLLECTIONS_NAME	backend/server/src/community_post.rs	/^const USER_COLLECTIONS_NAME: &str = "Users";$/;"	C
UserSchema	backend/chat_server/src/store.rs	/^pub struct UserSchema {$/;"	s
_id	backend/chat_server/src/store.rs	/^    pub _id: ObjectId,$/;"	m	struct:UserSchema
_id	backend/server/src/models/community_post_schema.rs	/^    pub _id: ObjectId,$/;"	m	struct:CommunityPostsSchema
auth	backend/server/src/main.rs	/^mod auth;$/;"	n
auth_middleware	backend/server/src/main.rs	/^mod auth_middleware;$/;"	n
authenticate_customer	backend/server/src/auth/auth_middleware.rs	/^pub async fn authenticate_customer(Json(_req): Json<LoginUser>) -> StatusCode {$/;"	f
authenticate_jwt	backend/server/src/auth/auth_middleware.rs	/^pub async fn authenticate_jwt(req: Request, next: Next) ->Result<impl IntoResponse, (StatusCode,/;"	f
chat	backend/server/src/main.rs	/^mod chat;$/;"	n
comment	backend/server/src/models/community_post_schema.rs	/^    pub comment: Vec<String>,   $/;"	m	struct:CommunityPostSchema
community_post	backend/server/src/main.rs	/^pub mod community_post;$/;"	n
downvotes	backend/server/src/community_post.rs	/^    downvotes: Vec<u32>,$/;"	m	struct:Grade
downvotes	backend/server/src/models/community_post_schema.rs	/^    pub downvotes: u32,$/;"	m	struct:CommunityPostSchema
email	backend/chat_server/src/store.rs	/^    pub email: String,$/;"	m	struct:UserSchema
hot_posts	backend/server/src/community_post.rs	/^pub async fn hot_posts(client: State<Client>) -> Result<Json<Vec<Document>>, Json<String>> {$/;"	f
hot_posts	backend/server/src/models/community_post_schema.rs	/^    pub hot_posts: Vec<CommunityPostSchema>,    $/;"	m	struct:CommunityPostsSchema
is_duplicate_id	backend/server/src/community_post.rs	/^pub async fn is_duplicate_id(collection: &Collection<CommunityPostsSchema>, Json(post): &Json<Co/;"	f
login	backend/server/src/auth.rs	/^pub mod login;$/;"	n
main	backend/chat_server/src/main.rs	/^async fn main() -> anyhow::Result<(), anyhow::Error> {$/;"	f
main	backend/server/src/main.rs	/^async fn main() {$/;"	f
message	backend/chat_server/src/store.rs	/^    pub message: String,$/;"	m	struct:Session
models	backend/server/src/main.rs	/^mod models; $/;"	n
most_liked	backend/server/src/community_post.rs	/^pub async fn most_liked(client: State<Client>) -> Result<Json<Vec<CommunityPostSchema>>, Json<St/;"	f
most_liked	backend/server/src/models/community_post_schema.rs	/^    pub most_liked: CommunityPostSchema,$/;"	m	struct:CommunityPostsSchema
new	backend/server/src/community_post.rs	/^    fn new() -> Self {$/;"	P	implementation:Grade
password	backend/chat_server/src/store.rs	/^    pub password: String,$/;"	m	struct:UserSchema
phone_no	backend/chat_server/src/store.rs	/^    pub phone_no: Option<String>,$/;"	m	struct:UserSchema
post_content	backend/server/src/models/community_post_schema.rs	/^    pub post_content: String,$/;"	m	struct:CommunityPostSchema
posts	backend/server/src/community_post.rs	/^pub async fn posts(client: State<Client>, Json(post): Json<CommunityPostSchema>) -> (StatusCode,/;"	f
posts	backend/server/src/models/community_post_schema.rs	/^    pub posts: Vec<CommunityPostSchema>,$/;"	m	struct:CommunityPostsSchema
posts_update	backend/server/src/community_post.rs	/^pub async fn posts_update(client: &State<Client>, Json(post): Json<CommunityPostSchema>) -> (Sta/;"	f
profile_pic	backend/server/src/models/community_post_schema.rs	/^    pub profile_pic: Option<String>,$/;"	m	struct:CommunityPostSchema
receiver_username	backend/chat_server/src/store.rs	/^    pub receiver_username: String,$/;"	m	struct:Session
register	backend/server/src/auth.rs	/^pub mod register;$/;"	n
retrieve_active_user	backend/server/src/community_post.rs	/^pub async fn retrieve_active_user(collection: &Collection<CommunityPostsSchema>, Json(post): &Js/;"	f
room_id	backend/chat_server/src/store.rs	/^    pub room_id: String,$/;"	m	struct:Session
sender_username	backend/chat_server/src/store.rs	/^    pub sender_username: String,$/;"	m	struct:Session
smtp	backend/server/src/main.rs	/^mod smtp;$/;"	n
store	backend/chat_server/src/main.rs	/^mod store;$/;"	n
subject	backend/server/src/models/community_post_schema.rs	/^    pub subject: String,$/;"	m	struct:CommunityPostSchema
trending_posts	backend/server/src/community_post.rs	/^pub async fn trending_posts(client: State<Client>) -> Result<Json<Vec<CommunityPostSchema>>, Jso/;"	f
update	backend/server/src/community_post.rs	/^    fn update(&mut self, upvotes: u32, downvotes: u32) {$/;"	P	implementation:Grade
upvotes	backend/server/src/community_post.rs	/^    upvotes: Vec<u32>,$/;"	m	struct:Grade
upvotes	backend/server/src/models/community_post_schema.rs	/^    pub upvotes: u32,$/;"	m	struct:CommunityPostSchema
user_id	backend/server/src/models/community_post_schema.rs	/^    pub user_id: ObjectId,$/;"	m	struct:CommunityPostSchema
username	backend/chat_server/src/store.rs	/^    pub username: String,$/;"	m	struct:UserSchema
username	backend/server/src/models/community_post_schema.rs	/^    pub username: String,$/;"	m	struct:CommunityPostSchema
username	backend/server/src/models/community_post_schema.rs	/^    pub username: String,$/;"	m	struct:CommunityPostsSchema
verification_token	backend/chat_server/src/store.rs	/^    pub verification_token: String,$/;"	m	struct:UserSchema
verified	backend/chat_server/src/store.rs	/^    pub verified: bool,$/;"	m	struct:UserSchema
